module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCostCalculate {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CostCalculate {
  id: ID!
  title: String!
  price: Float!
  post: Post!
}

type CostCalculateConnection {
  pageInfo: PageInfo!
  edges: [CostCalculateEdge]!
  aggregate: AggregateCostCalculate!
}

input CostCalculateCreateInput {
  id: ID
  title: String!
  price: Float!
  post: PostCreateOneWithoutCostsInput!
}

input CostCalculateCreateManyWithoutPostInput {
  create: [CostCalculateCreateWithoutPostInput!]
  connect: [CostCalculateWhereUniqueInput!]
}

input CostCalculateCreateWithoutPostInput {
  id: ID
  title: String!
  price: Float!
}

type CostCalculateEdge {
  node: CostCalculate!
  cursor: String!
}

enum CostCalculateOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  price_ASC
  price_DESC
}

type CostCalculatePreviousValues {
  id: ID!
  title: String!
  price: Float!
}

input CostCalculateScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  AND: [CostCalculateScalarWhereInput!]
  OR: [CostCalculateScalarWhereInput!]
  NOT: [CostCalculateScalarWhereInput!]
}

type CostCalculateSubscriptionPayload {
  mutation: MutationType!
  node: CostCalculate
  updatedFields: [String!]
  previousValues: CostCalculatePreviousValues
}

input CostCalculateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CostCalculateWhereInput
  AND: [CostCalculateSubscriptionWhereInput!]
  OR: [CostCalculateSubscriptionWhereInput!]
  NOT: [CostCalculateSubscriptionWhereInput!]
}

input CostCalculateUpdateInput {
  title: String
  price: Float
  post: PostUpdateOneRequiredWithoutCostsInput
}

input CostCalculateUpdateManyDataInput {
  title: String
  price: Float
}

input CostCalculateUpdateManyMutationInput {
  title: String
  price: Float
}

input CostCalculateUpdateManyWithoutPostInput {
  create: [CostCalculateCreateWithoutPostInput!]
  delete: [CostCalculateWhereUniqueInput!]
  connect: [CostCalculateWhereUniqueInput!]
  set: [CostCalculateWhereUniqueInput!]
  disconnect: [CostCalculateWhereUniqueInput!]
  update: [CostCalculateUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CostCalculateUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CostCalculateScalarWhereInput!]
  updateMany: [CostCalculateUpdateManyWithWhereNestedInput!]
}

input CostCalculateUpdateManyWithWhereNestedInput {
  where: CostCalculateScalarWhereInput!
  data: CostCalculateUpdateManyDataInput!
}

input CostCalculateUpdateWithoutPostDataInput {
  title: String
  price: Float
}

input CostCalculateUpdateWithWhereUniqueWithoutPostInput {
  where: CostCalculateWhereUniqueInput!
  data: CostCalculateUpdateWithoutPostDataInput!
}

input CostCalculateUpsertWithWhereUniqueWithoutPostInput {
  where: CostCalculateWhereUniqueInput!
  update: CostCalculateUpdateWithoutPostDataInput!
  create: CostCalculateCreateWithoutPostInput!
}

input CostCalculateWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  post: PostWhereInput
  AND: [CostCalculateWhereInput!]
  OR: [CostCalculateWhereInput!]
  NOT: [CostCalculateWhereInput!]
}

input CostCalculateWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createCostCalculate(data: CostCalculateCreateInput!): CostCalculate!
  updateCostCalculate(data: CostCalculateUpdateInput!, where: CostCalculateWhereUniqueInput!): CostCalculate
  updateManyCostCalculates(data: CostCalculateUpdateManyMutationInput!, where: CostCalculateWhereInput): BatchPayload!
  upsertCostCalculate(where: CostCalculateWhereUniqueInput!, create: CostCalculateCreateInput!, update: CostCalculateUpdateInput!): CostCalculate!
  deleteCostCalculate(where: CostCalculateWhereUniqueInput!): CostCalculate
  deleteManyCostCalculates(where: CostCalculateWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
  author: User!
  costs(where: CostCalculateWhereInput, orderBy: CostCalculateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CostCalculate!]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  description: String!
  author: UserCreateOneWithoutPostsInput!
  costs: CostCalculateCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCostsInput {
  create: PostCreateWithoutCostsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  description: String!
  costs: CostCalculateCreateManyWithoutPostInput
}

input PostCreateWithoutCostsInput {
  id: ID
  title: String!
  description: String!
  author: UserCreateOneWithoutPostsInput!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  description: String
  author: UserUpdateOneRequiredWithoutPostsInput
  costs: CostCalculateUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  title: String
  description: String
}

input PostUpdateManyMutationInput {
  title: String
  description: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCostsInput {
  create: PostCreateWithoutCostsInput
  update: PostUpdateWithoutCostsDataInput
  upsert: PostUpsertWithoutCostsInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  description: String
  costs: CostCalculateUpdateManyWithoutPostInput
}

input PostUpdateWithoutCostsDataInput {
  title: String
  description: String
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutCostsInput {
  update: PostUpdateWithoutCostsDataInput!
  create: PostCreateWithoutCostsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  author: UserWhereInput
  costs_every: CostCalculateWhereInput
  costs_some: CostCalculateWhereInput
  costs_none: CostCalculateWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  costCalculate(where: CostCalculateWhereUniqueInput!): CostCalculate
  costCalculates(where: CostCalculateWhereInput, orderBy: CostCalculateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CostCalculate]!
  costCalculatesConnection(where: CostCalculateWhereInput, orderBy: CostCalculateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CostCalculateConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  costCalculate(where: CostCalculateSubscriptionWhereInput): CostCalculateSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  emailValidate: Boolean!
  validEmailToken: String
  resetPasswordToken: String
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  emailValidate: Boolean
  validEmailToken: String
  resetPasswordToken: String
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  emailValidate: Boolean
  validEmailToken: String
  resetPasswordToken: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  emailValidate_ASC
  emailValidate_DESC
  validEmailToken_ASC
  validEmailToken_DESC
  resetPasswordToken_ASC
  resetPasswordToken_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  emailValidate: Boolean!
  validEmailToken: String
  resetPasswordToken: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  emailValidate: Boolean
  validEmailToken: String
  resetPasswordToken: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  emailValidate: Boolean
  validEmailToken: String
  resetPasswordToken: String
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPostsDataInput {
  name: String
  email: String
  password: String
  emailValidate: Boolean
  validEmailToken: String
  resetPasswordToken: String
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  emailValidate: Boolean
  emailValidate_not: Boolean
  validEmailToken: String
  validEmailToken_not: String
  validEmailToken_in: [String!]
  validEmailToken_not_in: [String!]
  validEmailToken_lt: String
  validEmailToken_lte: String
  validEmailToken_gt: String
  validEmailToken_gte: String
  validEmailToken_contains: String
  validEmailToken_not_contains: String
  validEmailToken_starts_with: String
  validEmailToken_not_starts_with: String
  validEmailToken_ends_with: String
  validEmailToken_not_ends_with: String
  resetPasswordToken: String
  resetPasswordToken_not: String
  resetPasswordToken_in: [String!]
  resetPasswordToken_not_in: [String!]
  resetPasswordToken_lt: String
  resetPasswordToken_lte: String
  resetPasswordToken_gt: String
  resetPasswordToken_gte: String
  resetPasswordToken_contains: String
  resetPasswordToken_not_contains: String
  resetPasswordToken_starts_with: String
  resetPasswordToken_not_starts_with: String
  resetPasswordToken_ends_with: String
  resetPasswordToken_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    